<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.project.book.dao.BookDAO">
	
	<!-- book_id로 책 정보 조회 -->	
	<select id="bookDetail" resultType="bookVO" parameterType="bookVO">
		select book_id, book_name, cover, author, translator, publisher, published_date,
			   is_ebook, form_detail, isbn, book_introduction, author_introduction, contents, view_cnt, category_no
		  from book
		  where book_id = #{book_id}
	</select>
	
	<!-- 책 조회수 올리기 -->
	<update id="upView_cnt" parameterType="String">
		update book 
			set		view_cnt = view_cnt + 1
			where 	book_id = #{book_id}
	</update>
	
	<!-- 카테고리 별로 책 n권씩 가져오기  -->
	<select id="booklistByCategory" resultType="bookVO" parameterType="categoryVO">
		select br.book_id , br.book_name, br.author, br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name, b.author, b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select book_id, book_name, author, category_no, publisher , published_date , cover
			        from book
			        where category_no like #{categoryNumber} || '%'
			        order by published_date desc ) b
		    where #{end} >= rownum ) br
		where br.rnum >= #{start}
	</select>
	
	<!-- 평점이 높은 책 리스트 가져오기  -->
	<select id="topRatingBookList" resultType="bookVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select bp.book_id, bp.book_name, bp.category_no, bp.publisher , bp.published_date , bp.cover, r.rating
			        from book bp inner join (
			        					select book_id, avg(rating) rating
			        					from review
			        					group by book_id
			        						) r on bp.book_id = r.book_id
			        order by r.rating desc ) b
		    where 21 >= rownum ) br
		where br.rnum >= 1
	</select>
	
	<!-- 조회수가 높은 책 리스트 가져오기  -->
	<select id="topViewCntBookList" resultType="bookVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select book_id, book_name, category_no, publisher , published_date , cover, view_cnt
			        from book
			        order by view_cnt desc ) b
		    where 21 >= rownum ) br
		where br.rnum >= 1
	</select>
	
	<!-- 관심이 높은 책 리스트 가져오기  -->
	<select id="topInterestBookList" resultType="bookVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select bp.book_id, bp.book_name, bp.category_no, bp.publisher , bp.published_date , bp.cover, i.interest
			        from book bp inner join (
			        					select book_id, count(*) interest
			        					from interest
			        					group by book_id
			        						) i on bp.book_id = i.book_id
			        order by i.interest desc ) b
		    where 21 >= rownum ) br
		where br.rnum >= 1
	</select>
	
	<!-- 책 검색 결과로 책 n권씩 가져오기 -->
	<select id="booklistByKeyword" resultType="bookVO" parameterType="searchVO">
		select br.book_id , br.book_name , br.author, br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.author, b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select book_id, book_name, author, category_no, publisher , published_date , cover
			        from book
			        where book_name like '%'||#{keyword}||'%' or author like '%'||#{keyword}||'%' or publisher like '%'||#{keyword}||'%'
			        order by published_date desc ) b
		    where #{end} >= rownum ) br
		where br.rnum >= #{start} 
	</select>
	
	<select id="categorylistBycategoryNo" resultType="CategorySerchVO" parameterType="string">
		select * from db_category
        		where category_no like #{categoryNo} || '%'
	</select>
	
	<select id="categoryNamesBycategoryNo" resultType="CategorySerchVO" parameterType="string">
		select * from db_category
        		where category_no = #{categoryNo}
	</select>
	
	<!-- 책 검색 결과로 책 n권씩 가져오기 -->
	<select id="categorylistBycategoryNoInit" resultType="CategorySerchVO" parameterType="string">
		select * from db_category
	</select>

	<!-- 로그인한 유저의 나이대의 선호도서 가져오기  -->
	<select id="topUserAgeBookList" resultType="bookVO" parameterType="loginVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select bp.book_id, bp.book_name, bp.category_no, bp.publisher , bp.published_date , bp.cover, ru.rating
			        from book bp inner join (
											select book_id, avg(rating) rating
											from review r inner join db_user u on r.id = u.id and u.age_range = #{age_range}
											group by book_id
			        						) ru on bp.book_id = ru.book_id
			        order by ru.rating desc ) b
		    where 21 >= rownum ) br
		where br.rnum >= 1
	</select>
	
	<!-- 성향이 비슷한 회원이 좋아한 도서  -->
	<select id="similarRatingBookList" resultType="bookVO" parameterType="loginVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		  from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		      from (
			        select bp.book_id, bp.book_name, bp.category_no, bp.publisher , bp.published_date , bp.cover, ruc.rating
			          from book bp inner join (
											select book_id, avg(rating) rating
											  from review
											  where book_id not in (
											                        select book_id
											                          from review
											                          where id = #{id}
											                       )
											  		and id in (
														select compare_id
														  from user_correlation 
														  where id = #{id}
													 	)
											group by book_id
			        						) ruc on bp.book_id = ruc.book_id
			        order by ruc.rating desc ) b
		      where 21 >= rownum ) br
		  where br.rnum >= 1
	</select>
	
	<!-- 로그인한 유저의 관심도서가 같은 사람들의 또다른 관심도서 가져오기  -->
	<select id="sameInterestBookList" resultType="bookVO" parameterType="loginVO">
		select br.book_id , br.book_name , br.category_no , br.publisher , br.published_date , br.cover
		from ( 
		    select rownum as rnum, b.book_id , b.book_name , b.category_no , b.publisher , b.published_date , b.cover
		    from (
			        select bp.book_id, bp.book_name, bp.category_no, bp.publisher , bp.published_date , bp.cover, iii.interest_count
			        from book bp inner join (
											select book_id, count(*) interest_count
											  from interest
											  where book_id not in (
											                        select book_id
											                          from interest
											                          where id = #{id}
											                       )
											        and id in (
											                    select distinct id
											                      from interest
											                      where book_id in(
											                      					select book_id
											                      					  from interest
											                      					  where id = #{id}
											                      				  )
											                  )
											  group by book_id
			        						) iii on bp.book_id = iii.book_id
			        order by interest_count desc ) b
		    where 21 >= rownum ) br
		where br.rnum >= 1
	</select>
</mapper>